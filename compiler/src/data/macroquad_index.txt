// index.html file that loads wasm blob and js glue with hack for interop between macroquad and wasm-bindgen
// TODO: message while wasm is loading
r#"<html><head><title>{title}</title><style>
    body {{ text-align: center; width: 100%; height: 100%; overflow: hidden; margin: 0; padding: 0; }}
    /* TODO: you cant just zoom the canvas cause it breaks egui mouse pos events? */
    canvas {{ overflow: hidden; outline: none; display: inline-block; width: 100%; height: 100%; }}
</style></head><body>

<h1 id="title" style="margin: 0; padding: 0;"> {title} </h1>
<button style="color: red; font-size: 2rem; margin-top: 30px;" id="start">Click here to start</button>
<!-- `glcanvas` is a magic id mq_js_bundle looks for  width="480" height="360"-->
<canvas id="glcanvas" tabindex='1' style="display: none;"></canvas>

<script>
var params_set_mem;
var params_register_js_plugin;
</script>
<script src="{mq_js_bundle_url}"></script>
<script type="module">
   import init, {{ set_wasm }} from "./{name}.js";
    document.getElementById("start").addEventListener("click", async () => {{
       document.getElementById("start").disabled = true;
       document.getElementById("start").innerText = "Loading wasm...";

            {hint}
           /*{warning_comment}*/
           // This also requires the compiler to hack in postprocessing step to the wasm_bg_js
           let wbg = await init();
           miniquad_add_plugin({{
               register_plugin: (importObject) => {{
                   // In fact, unless someone else is messing with it, importObject.wbg should === undefined
                   assert(Object.keys((importObject.wbg || {{}})).length <= Object.keys(wbg || {{}}).length, "What mq_js_bundle exposes to wasm-bindgen should be a subset of what wasm-bindgen asks for.");
                   importObject.wbg = wbg;
                   // When wasm-bindgen gets its hands on the import object, it will move things from [wbg] to [env] where rust can access them.
                   console.log("the 'No __wbg_... function in gl.js' warnings are probably fine :)"); // TODO make them go away
               }},
               on_init: () => {{
                   set_wasm(wasm_exports);
                   document.getElementById("start").hidden = true;
                   document.getElementById("title").hidden = true;
                   document.getElementById("glcanvas").style.display = "block";
               }},
               version: "0.2.0",
               name: "wbg",
           }});

        load("{name}_bg.wasm");
   }});



</script></body></html>"#
